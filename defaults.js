/**
 * Default configuration file for the Collection extension Offline Content
 * Generator. Local settings should be in /etc/mw-collection-ocg.js with
 * settings modified in a function like:
 *
 * module.exports = function(config) { config.foo = 'bar'; }
 */
module.exports = {
	/** Service management thread, coordinates (re)launching threads and initial global setup */
	"coordinator": {
		/** The number of frontend threads to spawn. At the moment we don't have good data on how
		 * many clients can be served via a thread in a production environment.
		 */
		"frontend_threads": 2,
		/** The number of backend threads to spawn. These are heavy rendering threads and so should
		 * be set to some ratio of CPU cores. If set to "auto" the coordinator will launch a thread
		 * per CPU core.
		 */
		"backend_threads": "auto",

		/** Public hostname of this instance for HTTP GET requests for locally stored content. */
		"hostname": null
	},
	/** Configuration for the frontend HTTP server thread. You can choose to serve
	 * content via a local socket, or an IP address. If both are null the server will
	 * bind to all IP addresses.
	 */
	"frontend": {
		"address": null,
		"socket": null,
		"port": 17080
	},
	/** Configuration for the backend bundling & and rendering process threads. */
	"backend": {
		"bundler": {
			"bin": "../mw-ocg-bundler/bin/mw-ocg-bundler",
			"parsoid_api": "http://localhost/",
			"parsoid_prefix": "localhost"
		},
		"writers": {
			"rdf2latex": {
				"bin": "../mw-ocg-latexer/bin/mw-ocg-latexer",
				"extension": ".pdf"
			},
			"rdf2text": {
				"bin": "../mw-ocg-texter/bin/mw-ocg-texter",
				"extension": ".txt"
			}
		},

		"temp_dir": null
	},
	/** Redis is used in both the frontend and backend for queueing jobs and job
	 * metadata storage.
	 */
	"redis": {
		"host": "localhost",
		"port": 6379,
		"password": null,
		"retry_max_delay": 60000,

		"job_queue_name": "render_job_queue",
		"status_set_name": "job_status"
	},
	/** Active metric reporting via the StatsD protocol. General health can be obtained by querying
	 * the frontend with a HTTP GET ?request=health query
	 */
	"reporting": {
		/** If true will send UDP packets to the StatsD server. */
		"enable": false,
		/** Hostname to send StatsD metrics to. */
		"statsd_server": "localhost",
		/** Port to send StatsD metrics to. */
		"statsd_port": 8125,
		/** The txstatsd daemon can have non standard behaviour. If you're running the
		 * ConfigurableCollector set this to true.
		 */
		"is_txstatsd": false,
		/** Prefix for all statistics generated by this application */
		"prefix": "ocg.pdf."
	}
};
